// pkl eval --multiple-file-output-path . clients.pkl

import "package://pkg.pkl-lang.org/github.com/jamesward/pklgha/pklgha@0.0.12#/GitHubAction.pkl"
import "package://pkg.pkl-lang.org/github.com/jamesward/pklgha/pklgha@0.0.12#/GitHubActionJava.pkl"
import "package://pkg.pkl-lang.org/github.com/jamesward/pklgha/pklgha@0.0.12#/GitHubActionScala.pkl"
// import "../../../pklgha/src/GitHubAction.pkl"
// import "../../../pklgha/src/GitHubActionJava.pkl"
// import "../../../pklgha/src/GitHubActionScala.pkl"

class Run {
  `runs-on`: String?
  steps: Listing<GitHubAction.Step>
}

clients = new Mapping<String, Run> {
  ["dotnet"] = new {
    steps {
      new {
        uses = "actions/checkout@v4"
      }
      new {
        uses = "actions/setup-dotnet@v4"
        with {
          ["dotnet-version"] = "3.1.x"
        }
      }
      new {
        run = "dotnet test"
        `working-directory` = "./dotnet/EasyRacer.Tests"
      }
    }
  }

  ["elm-worker"] = new {
    steps {
      new {
        uses = "actions/checkout@v4"
      }
      new {
        uses = "jorelali/setup-elm@v5"
        with {
          ["elm-version"] = "0.19.1"
        }
      }
      new {
        run = """
          echo Compiling Elm sources...
          for num in {1..9}; do
          elm make --optimize --output=app/EasyRacer/Scenario$num.js src/EasyRacer/Scenario$num.elm
          done
          npm install --no-fund
          npm install -g --save-dev --no-fund jest
          npm test
          """
      }
    }
  }

  ["go-stdlib"] = new {
    steps {
      new {
        uses = "actions/checkout@v4"
      }
      new {
        uses = "actions/setup-go@v5"
        with {
          ["go-version-file"] = "./go-stdlib/go.mod"
        }
      }
      new {
        run = "go test ./..."
      }
    }
  }

  ["java-loom"] = new {
    steps = GitHubActionJava.gradleTestSteps(null, "java-loom")
  }

  ["javascript-stdlib"] = new {
    steps {
      new {
        uses = "actions/checkout@v4"
      }
      new {
        uses = "actions/setup-node@v4"
        with {
          ["node-version"] = "21.6.0"
          ["cache"] = "npm"
          ["cache-dependency-path"] = "javascript-stdlib/package-lock.json"
        }
      }
      new {
        run = """
          npm ci
          npm test
          """
      }
    }
  }

  ["kotlin-arrow"] = new {
    steps = GitHubActionJava.gradleTestSteps(null, "kotlin-arrow")
  }

  ["kotlin-coroutines"] = new {
    steps = GitHubActionJava.gradleTestSteps(null, "kotlin-coroutines")
  }

  ["kotlin-splitties"] = new {
    steps = GitHubActionJava.gradleTestSteps(null, "kotlin-splitties")
  }

  ["ocaml-cohttp-eio"] = new {
    steps {
      new {
        uses = "actions/checkout@v4"
      }
      new {
        name = "Set-up OCaml 5.1"
        uses = "ocaml/setup-ocaml@v2"
        with {
          ["ocaml-compiler"] = "5.1"
          ["dune-cache"] = "true"
        }
      }
      new {
        name = "Run tests"
        run = """
          opam install . --deps-only --with-test
          ulimit -n 16000
          opam exec -- dune runtest --force
          """
      }
    }
  }

  ["ocaml-cohttp-lwt"] = new {
    steps {
      new {
        uses = "actions/checkout@v4"
      }
      new {
        name = "Set-up OCaml 5.1"
        uses = "ocaml/setup-ocaml@v2"
        with {
          ["ocaml-compiler"] = "5.1"
          ["dune-cache"] = "true"
        }
      }
      new {
        name = "Install libev"
        run = "sudo apt install libev4 libev-dev"
      }
      new {
        name = "Run tests"
        run = """
          opam install . --deps-only --with-test
          ulimit -n 16000
          opam exec -- dune runtest --force
          """
      }
    }
  }

  ["python-aiohttp"] = new {
    steps {
      new {
        uses = "actions/checkout@v4"
      }
      new {
        uses = "cachix/install-nix-action@v26"
        with {
          ["nix_path"] = "nixpkgs=channel:nixpkgs-unstable"
          ["github_access_token"] = "${{ secrets.GITHUB_TOKEN }}"
        }
      }
      new {
        run = """
          ulimit -n 16000
          nix-shell --run "pytest"
          """
      }
    }
  }

  ["python-aiohttp-taskgroup"] = new {
    steps {
      new {
        uses = "actions/checkout@v4"
      }
      new {
        uses = "cachix/install-nix-action@v26"
        with {
          ["nix_path"] = "nixpkgs=channel:nixpkgs-unstable"
          ["github_access_token"] = "${{ secrets.GITHUB_TOKEN }}"
        }
      }
      new {
        run = """
          ulimit -n 16000
          nix-shell --run "pytest"
          """
      }
    }
  }

  ["python-httpx-asyncio"] = new {
    steps {
      new {
        uses = "actions/checkout@v4"
      }
      new {
        uses = "actions/setup-python@v5"
        with {
          ["python-version-file"] = "./python-httpx-asyncio/.python-version"
          ["cache"] = "pip"
          ["cache-dependency-path"] = "./python-httpx-asyncio/requirements.txt"
        }
      }
      new {
        run = """
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          """
      }
      new {
        run = "pytest"
      }
    }
  }

  ["python-httpx-trio"] = new {
    steps {
      new {
        uses = "actions/checkout@v4"
      }
      new {
        uses = "cachix/install-nix-action@v26"
        with {
          ["nix_path"] = "nixpkgs=channel:nixpkgs-unstable"
          ["github_access_token"] = "${{ secrets.GITHUB_TOKEN }}"
        }
      }
      new {
        run = """
          ulimit -n 16000
          nix-shell --run "pytest"
          """
      }
    }
  }

  ["rust-tokio"] = new {
    steps {
      new {
        uses = "actions/checkout@v4"
      }
      new {
        run = "cargo test"
      }
    }
  }

  ["scala-ce3"] = new {
    steps = GitHubActionScala.sbtTestSteps(null, "./scala-ox", "21-ea")
  }

  ["scala-kyo"] = new {
    steps = GitHubActionScala.sbtTestSteps(null, "./scala-kyo", null)
  }

  ["scala-ox"] = new {
    steps = GitHubActionScala.sbtTestSteps(null, "./scala-ox", "21-ea")
  }

  ["scala-zio"] = new {
    steps = GitHubActionScala.sbtTestSteps(null, "./scala-zio", null)
  }

  ["swift-async"] = new {
    `runs-on` = "macos-latest"
    steps {
      new {
        uses = "actions/checkout@v4"
      }
      new {
        name = "Setup Docker on macOS"
        uses = "douglascamata/setup-docker-macos-action@v1-alpha"
      }
      new {
        run = "swift test -c release"
      }
    }
  }

  ["swift-combine"] = new {
    `runs-on` = "macos-latest"
    steps {
      new {
        uses = "actions/checkout@v4"
      }
      new {
        name = "Setup Docker on macOS"
        uses = "douglascamata/setup-docker-macos-action@v1-alpha"
      }
      new {
        run = "swift test -c release"
      }
    }
  }

  ["swift-dispatch"] = new {
    `runs-on` = "macos-latest"
    steps {
      new {
        uses = "actions/checkout@v4"
      }
      new {
        name = "Setup Docker on macOS"
        uses = "douglascamata/setup-docker-macos-action@v1-alpha"
      }
      new {
        run = "swift test -c release"
      }
    }
  }
}

function workflow(client: String, s: Run): GitHubAction = new GitHubAction {
  on {
    workflow_run {
      workflows {
        "scenario-server"
      }
      types {
        "completed"
      }
    }
    push {
      paths {
        "\(client)/**"
        ".github/workflows/\(client).yaml"
      }
    }
    pull_request {
      paths {
        "\(client)/**"
        ".github/workflows/\(client).yaml"
      }
    }
  }

  jobs {
    ["test"] = new {
      `runs-on` = s.`runs-on` ?? "ubuntu-latest"
      `if` = "${{ github.event.workflow_run == null || github.event.workflow_run.conclusion == 'success' }}"
      steps = s.steps
      defaults {
        run {
          `working-directory` = client
        }
      }
    }
  }
}

output {
  files = clients
    .toMap()
    .map((key, v) -> Pair("\(key).yaml", new FileOutput {
      text = "# Generated file. DO NOT EDIT.\n" + super.text
      value = workflow(key, v)
      renderer = new YamlRenderer { }
    }))
    .toMapping()
}
