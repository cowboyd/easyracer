// pkl eval --multiple-file-output-path . clients.pkl

import "package://pkg.pkl-lang.org/github.com/jamesward/pklgha/pklgha@0.0.13#/GitHubAction.pkl"
//import "../../../pklgha/src/GitHubAction.pkl"


class Run {
  `runs-on`: String?
  steps: Listing<GitHubAction.Step>
}

clients = new Mapping<String, Run> {
  ["dotnet"] = new {
    steps = GitHubAction.Dotnet.testSteps(null, "3.1.x", "./dotnet/EasyRacer.Tests")
  }

  ["elm-worker"] = new {
    steps = (GitHubAction.Elm.setupElm("0.19.1")) {
      new {
        run = """
          echo Compiling Elm sources...
          for num in {1..9}; do
            elm make --optimize --output=app/EasyRacer/Scenario$num.js src/EasyRacer/Scenario$num.elm
          done
          npm install --no-fund
          npm install -g --save-dev --no-fund jest
          npm test
          """
      }
    }
  }

  ["go-stdlib"] = new {
    steps = GitHubAction.Go.testSteps(null, "go-stdlib/go.mod")
  }

  ["java-loom"] = new {
    steps = GitHubAction.Java.gradleTestSteps(null, "java-loom")
  }

  ["javascript-stdlib"] = new {
    steps = GitHubAction.Node.testSteps(null, "21.6.0", "javascript-stdlib/package-lock.json")
  }

  ["kotlin-arrow"] = new {
    steps = GitHubAction.Java.gradleTestSteps(null, "kotlin-arrow")
  }

  ["kotlin-coroutines"] = new {
    steps = GitHubAction.Java.gradleTestSteps(null, "kotlin-coroutines")
  }

  ["kotlin-splitties"] = new {
    steps = GitHubAction.Java.gradleTestSteps(null, "kotlin-splitties")
  }

  ["ocaml-cohttp-eio"] = new {
    steps = GitHubAction.OCaml.testSteps(null, "5.1")
  }

  ["ocaml-cohttp-lwt"] = new {
    steps = new {
      new GitHubAction.Step {
        name = "Install libev"
        run = "sudo apt install libev4 libev-dev"
        `working-directory` = "./"
      }
      ...GitHubAction.OCaml.testSteps(null, "5.1")
    }
  }

  ["python-aiohttp"] = new {
    steps = GitHubAction.Nix.runSteps("pytest")
  }

  ["python-aiohttp-taskgroup"] = new {
    steps = GitHubAction.Nix.runSteps("pytest")
  }

  ["python-httpx-asyncio"] = new {
    steps = GitHubAction.Python.testSteps(null, null)
  }

  ["python-httpx-trio"] = new {
    steps = GitHubAction.Nix.runSteps("pytest")
  }

  ["rust-tokio"] = new {
    steps {
      new {
        uses = "actions/checkout@v4"
      }
      new {
        run = "rustup update"
      }
      new {
        run = "cargo test"
      }
    }
  }

  ["scala-ce3"] = new {
    steps = GitHubAction.Scala.sbtTestSteps(null, "./scala-ox", "21-ea")
  }

  ["scala-gears"] = new {
    steps = GitHubAction.Scala.sbtTestSteps(null, "./scala-gears", "21")
  }

  ["scala-kyo"] = new {
    steps = GitHubAction.Scala.sbtTestSteps(null, "./scala-kyo", null)
  }

  ["scala-ox"] = new {
    steps = GitHubAction.Scala.sbtTestSteps(null, "./scala-ox", "21-ea")
  }

  ["scala-zio"] = new {
    steps = GitHubAction.Scala.sbtTestSteps(null, "./scala-zio", null)
  }

  local swiftSteps = new Listing<GitHubAction.Step> {
    new {
      uses = "actions/checkout@v4"
    }
    new {
      uses = "atomicjar/testcontainers-cloud-setup-action@v1"
      with {
        ["token"] = "${{ secrets.TC_CLOUD_TOKEN }}"
      }
    }
    new {
      run = "swift test -c release"
    }
  }

  ["swift-async"] = new {
    `runs-on` = "macos-14"
    steps = swiftSteps
  }

  ["swift-combine"] = new {
    `runs-on` = "macos-14"
    steps = swiftSteps
  }

  ["swift-dispatch"] = new {
    steps {
      new {
        uses = "actions/checkout@v4"
      }
      new {
        run = "swift test -c release"
      }
    }
  }

  ["typescript-effect"] = new {
    steps = GitHubAction.Node.testSteps(null, "21.6.0", "typescript-effect/package-lock.json")
  }
}

function workflow(client: String, s: Run): GitHubAction = new GitHubAction {
  on {
    workflow_run {
      workflows {
        "scenario-server"
      }
      types {
        "completed"
      }
    }
    push {
      paths {
        "\(client)/**"
        ".github/workflows/\(client).yaml"
      }
    }
    pull_request {
      paths {
        "\(client)/**"
        ".github/workflows/\(client).yaml"
      }
    }
  }

  jobs {
    ["test"] = new {
      `runs-on` = s.`runs-on` ?? "ubuntu-latest"
      `if` = "${{ github.event.workflow_run == null || github.event.workflow_run.conclusion == 'success' }}"
      steps = s.steps
      defaults {
        run {
          `working-directory` = client
        }
      }
    }
  }
}

output {
  files = clients
    .toMap()
    .map((key, v) -> Pair("\(key).yaml", new FileOutput {
      text = "# Generated file. DO NOT EDIT.\n" + super.text
      value = workflow(key, v)
      renderer = new YamlRenderer { }
    }))
    .toMapping()
}
